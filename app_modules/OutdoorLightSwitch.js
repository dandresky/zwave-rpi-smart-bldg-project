/**
 * @brief   The OutdoorLightSwitch module enables or disables a group of light switches 
 *          at times of the day configured by the user. The user can also configure this 
 *          to be triggered by a sensor like an ambient light sensor.
 * 
 * @details It does this by signing up for event signals generated by zwave devices on 
 *          the network or system events.
 * 
 * @details All app modules implement the following two functions according to its needs:
 * 
 *              networkNotification(driver)
 *              getRequiredSystemServices()
 * 
 *          Both functions are called at startup by the application. Additionally, 
 *          networkNotifiction is called every time the network configuration changes. 
 * 
 * @details Another thought:
 * 
 *          The module informs the application what devices and services it wants events
 *          from and which devices it wants to control. This allows the application to 
 *          guide the user on what device options the module supports.
 * 
 *          The user adds a device to the network providing information about the device
 *          and how the user wants to use it.
 * 
 *          All app modules implement the following functions according to its needs:
 * 
 *          - addActuatorToControl
 *          - addSensorToListenTo(node)
 *          - getModuleRequiredSystemServices()
 *          - getModuleSupportedActuatorDeviceClasses()
 *          - getModuleSupportedSensorDeviceClasses()
 * 
 *          Each module has an associated json file with information about the app and 
 *          how it can be configured. The app serves up a web config page showing these
 *          parameters to the user so they can be managed.
 * 
 * @details And yet one more thought
 * 
 *          All of the module metadata is stored in an accompanying json file that can be 
 *          parsed by the application and used to guide a user through device selection
 *          and pairing, configuring behaviors of the module, and more. 
 * 
 *          The user interface may be a local web config page or a mobile app. The module
 *          json file is used to dynamically populate the UI components.
 *          
 * @details This module only has knowledge of the devices it can control and the devices
 *          and system services that it wants to receive events from.
 */

import chalk from 'chalk'
import fs from 'fs'
//import { Driver } from "zwave-js"

export default processEventSignal



/**
 * @brief   Process an event signal from the application.
 * 
 * @details The OutdoorLightSwitch module can respond to system time events and some
 *          sensor events.
 * 
 * @param   type = SYSTEM_DATE_TIME_EVENT or SENSOR_VALUE_CHANGE_NOTIFICATION
 * @param   event = event data
 */
const processEventSignal = (type, event) => {
    switch(type) {
        case "SYSTEM_DATE_TIME_EVENT":
            break;
        case "SENSOR_VALUE_CHANGE_NOTIFICATION":
            break;
        default:
            console.log(chalk.greenBright("Module(OLS) - received unknown event signal type: " + type))
    }
}




/* Generic Device Classes defined in the specification
GENERIC_TYPE_AV_CONTROL_POINT
GENERIC_TYPE_DISPLAY
GENERIC_TYPE_ENTRY_CONTROL
GENERIC_TYPE_GENERIC_CONTROLLER
GENERIC_TYPE_METER
GENERIC_TYPE_METER_PULSE
GENERIC_TYPE_NON_INTEROPERABLE
GENERIC_TYPE_REPEATER_SLAVE
GENERIC_TYPE_SEMI_INTEROPERABLE
GENERIC_TYPE_SENSOR_ALARM
GENERIC_TYPE_SENSOR_BINARY
GENERIC_TYPE_SENSOR_MULTILEVEL
GENERIC_TYPE_STATIC_CONTROLLER
GENERIC_TYPE_SWITCH_BINARY
GENERIC_TYPE_SWITCH_MULTILEVEL
GENERIC_TYPE_SWITCH_REMOTE
GENERIC_TYPE_SWITCH_TOGGLE
GENERIC_TYPE_THERMOSTAT
GENERIC_TYPE_VENTILATION
GENERIC_TYPE_WINDOW_COVERING
*/

